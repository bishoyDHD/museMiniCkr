/* 
 * constant definitions and types used across the analysis
 * Noah Wuerfel nwuerfel@umich.edu 10-12-18 goblu
 * ~AP AP AP AP~
 */
#ifndef __GEMTYPES_H__
#define __GEMTYPES_H__

#ifdef NDEBUG
#undef NDEBUG

#define NUM_GEMS 6
#define NUM_APV_PER_GEM 4
#define NUM_X_APV 2
#define NUM_Y_APV 2
#define NUM_MAX_CHAN_PER_APV 128
#define NUM_CHAN_APV_1 122
#define NUM_CHAN_APV_2 128
#define NUM_CHAN_PER_AXIS (NUM_CHAN_APV_1 + NUM_CHAN_APV_2)
#define NUM_CHAN_PER_GEM 2*(NUM_CHAN_PER_AXIS)
#define FREQUENT_SAMPLES 10
#define NUM_NEIGHBOR_CHANNELS 4
#define NUM_MAX_CLUSTER_CANDIDATES 3
#define NUM_CLUSTERS_PER_GEM 4
#define SPEC_RANGE_MIN 0.0
#define RANGE_MIN -500
#define RANGE_MAX 4000
#define SPEC_RANGE_MAX NUM_MAX_CHAN_PER_APV
#define SPEC_BINS NUM_MAX_CHAN_PER_APV

#include <cstdint>
#include <iostream>
#include <vector>
#include <assert.h>

// mapping from channel/ pin# to raw data word 
// generated by naive inversion of the original mapping because its useful
// to have both
const uint32_t inverse_mapping[NUM_MAX_CHAN_PER_APV] = {0, 16, 32, 48, 64,
80, 96, 112, 4, 20, 36, 52, 68, 84, 100, 116, 8, 24, 40, 56, 72, 88, 104, 
120, 12, 28, 44, 60, 76, 92, 108, 124, 1, 17, 33, 49, 65, 81, 97, 113, 5, 
21, 37, 53, 69, 85, 101, 117, 9, 25, 41, 57, 73, 89, 105, 121, 13, 29, 45,
61,77, 93, 109, 125, 2, 18, 34, 50, 66, 82, 98, 114, 6, 22, 38, 54, 70, 
86, 102, 118, 10, 26, 42, 58, 74, 90, 106, 122, 14, 30, 46, 62, 78, 94, 
110, 126, 3, 19, 35, 51, 67, 83, 99, 115, 7, 23, 39, 55, 71, 87, 103, 
119, 11, 27, 43, 59, 75, 91, 107, 123, 15, 31, 47, 63, 79, 95, 111, 127};

// from old code, the original generating function was:
// wordid( uint32_t chan) = 32*(chan%4) + 8*int(chan/4) -31*int(chan/6)
// never ask me where it came from, I dont know 
const uint32_t raw_data_to_channel[NUM_MAX_CHAN_PER_APV] = {0, 32, 64, 96, 8, 40, 72, 104, 16, 48, 80, 112, 24, 56, 88, 120, 1, 33, 65, 97, 9, 41, 73,
105, 17, 49, 81, 113, 25, 57, 89, 121, 2, 34, 66, 98, 10, 42, 74, 106, 18,
50, 82, 114, 26, 58, 90, 122, 3, 35, 67, 99, 11, 43, 75, 107, 19, 51, 83, 
115, 27, 59, 91, 123, 4, 36, 68, 100, 12, 44, 76, 108, 20, 52, 84, 116, 28,
60, 92, 124, 5, 37, 69, 101, 13, 45, 77, 109, 21, 53, 85, 117, 29, 61, 93, 
125, 6, 38, 70, 102, 14, 46, 78, 110, 22, 54, 86, 118, 30, 62, 94, 126, 7, 
39, 71, 103, 15, 47, 79, 111, 23, 55, 87, 119, 31, 63, 95, 127};


struct apv_peak_info{
    int max_channel_num;
    double peak_adc_value;
};

struct channel_frequent_info{
    uint32_t data_val=WINT_MAX;
    uint32_t count=0;
};

enum Axis{X='x', Y='y'};

struct apvRawData{
    uint32_t event_id;
    uint32_t num_apvs;

    // apv header is garbage anyway
    uint32_t apv_header[NUM_GEMS*NUM_APV_PER_GEM];

    //std::array<uint32_t,NUM_GEMS*NUM_APV_PER_GEM> apv_header; 
    uint32_t apv_id;
    uint32_t apv_data[NUM_GEMS*NUM_APV_PER_GEM][NUM_MAX_CHAN_PER_APV];
};

struct gem_cluster{
    uint32_t event_id;
    uint32_t gem_id;
    uint32_t x_chan_num;
    uint32_t y_chan_num;
    double adc_xy_avg_weight;
};

#endif //NDEBUG
#endif // __GEMTYPES_H__
